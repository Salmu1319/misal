<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function sitewide_alerts_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.sitewide_alerts') {
    $text = file_get_contents(__DIR__ . '/README.md');
    if (!Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    }
    else {
      /** @var \Drupal\markdown\PluginManager\ParserManagerInterface $parser_manager */
      $parser_manager = \Drupal::service('plugin.manager.markdown.parser');
      $parser = $parser_manager->getDefaultParser([
        'render_strategy' => ['type' => 'none'],
      ]);
      return $parser->parse($text);
    }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 */
function sitewide_alerts_theme($existing, $type, $theme, $path): array {
  return [
    'site_alerts' => [
      'variables' => [
        'alerts' => NULL,
      ],
    ],
    'site_alert' => [
      'variables' => [
        'alert' => NULL,
      ],
    ],
    'site_alert_merged' => [
      'variables' => [
        'primary_alert' => NULL,
        'alerts' => NULL,
      ],
    ],
  ];
}

/**
 * Get site-wide alerts.
 *
 * @param string $position
 *
 * @return array
 *   Returns render array of site-wide alerts.
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function _sitewide_alerts_get_alerts(string $position = 'top'): array {
  $build = [];
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // Get site-wide alerts state variables.
  $state_keys = [
    'site_alert_active',
    'site_alert_position',
    'site_alert_merge',
    'site_alert_expiration',
    'site_alert.' . $language . '.alerts',
  ];
  $config = \Drupal::state()->getMultiple($state_keys);

  // Make sure site alerts is active and position matches.
  if ($config && !empty($config['site_alert_active']) && $config['site_alert_position'] == $position) {
    // Get site alerts.
    $site_alerts = !empty($config['site_alert.' . $language . '.alerts']) ? $config['site_alert.' . $language . '.alerts'] : [];

    /** @var \Drupal\Core\Routing\AdminContext $admin_context */
    $admin_context = \Drupal::service('router.admin_context');
    if (!$admin_context->isAdminRoute()) {
      $merge_site_alerts = $config['site_alert_merge'] ?? FALSE;

      $build = [
        '#theme' => ($merge_site_alerts) ? 'site_alert_merged' : 'site_alerts',
        '#alerts' => [],
      ];

      // Get active domain if domain module is enabled.
      $activeDomainId = NULL;
      /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
      $moduleHandler = \Drupal::service('module_handler');
      if ($moduleHandler->moduleExists('domain')) {
        /** @var \Drupal\domain\DomainNegotiator $domainNegotiator */
        $domainNegotiator = \Drupal::service('domain.negotiator');
        $activeDomainId = $domainNegotiator->getActiveId();
      }

      // Process alerts.
      $alert_keys = [];
      foreach ($site_alerts AS $site_alert_position => $site_alert) {
        $alert_link = NULL;

        // Check domain if set.
        if (!empty($activeDomainId) && !empty($site_alert['alert_domain'])) {
          // If domain doesn't match, then we will skip this alert.
          if ($site_alert['alert_domain'] != $activeDomainId) {
            // Skip to next alert.
            continue;
          }
        }

        // Alert link type logic.
        $alert_link_type = !empty($site_alert['alert_link_type']) ? $site_alert['alert_link_type'] : 'internal';
        if ($alert_link_type == 'internal') {
          $alert_link_id = !empty($site_alert['alert_link']) ? $site_alert['alert_link'] : 0;
          if (!empty($alert_link_id)) {
            $alert_link = $alert_link_node = Node::load($alert_link_id);
            if ($alert_link_node && $alert_link_node->hasTranslation($language)) {
              $alert_link = $alert_link_node->getTranslation($language);
            }
            if ($alert_link) {
              $alert_link = $alert_link->toUrl()->toString();
            }
          }
        } elseif ($alert_link_type == 'external') {
          $alert_external_link = !empty($site_alert['alert_external_link']) ? $site_alert['alert_external_link'] : '';
          if (!empty($alert_external_link)) {
            $alert_link = $alert_external_link;
          }
        }

        // Merged alerts logic.
        if ($merge_site_alerts) {
          if ($site_alert_position == 1) {
            $build['#primary_alert'] = [
              'type' => !empty($site_alert['alert_type']) ? $site_alert['alert_type'] : '',
              'position' => 'position-' . $position,
              'title' => !empty($site_alert['alert_title']) ? $site_alert['alert_title'] : '',
              'message' => !empty($site_alert['alert_message']) ? $site_alert['alert_message'] : [],
              'dismiss' => !empty($site_alert['alert_dismiss']),
              'dismiss_title' => !empty($site_alert['alert_dismiss_title']) ? $site_alert['alert_dismiss_title'] : 'Close',
              'dismiss_key' => !empty($site_alert['alert_dismiss_key']) ? $site_alert['alert_dismiss_key'] : '',
              'link_type' => $alert_link_type,
              'link' => $alert_link,
              'link_title' => !empty($site_alert['alert_link_title']) ? $site_alert['alert_link_title'] : '',
            ];
          } else {
            $build['#alerts'][$site_alert_position] = [
              'type' => !empty($site_alert['alert_type']) ? $site_alert['alert_type'] : '',
              'position' => 'position-' . $position,
              'title' => !empty($site_alert['alert_title']) ? $site_alert['alert_title'] : '',
              'message' => !empty($site_alert['alert_message']) ? $site_alert['alert_message'] : [],
              'dismiss' => !empty($site_alert['alert_dismiss']),
              'dismiss_title' => !empty($site_alert['alert_dismiss_title']) ? $site_alert['alert_dismiss_title'] : 'Close',
              'dismiss_key' => !empty($site_alert['alert_dismiss_key']) ? $site_alert['alert_dismiss_key'] : '',
              'link_type' => $alert_link_type,
              'link' => $alert_link,
              'link_title' => !empty($site_alert['alert_link_title']) ? $site_alert['alert_link_title'] : '',
            ];
          }
        } else {
          $build['#alerts'][$site_alert_position] = [
            '#theme' => 'site_alert',
            '#alert' => [
              'type' => !empty($site_alert['alert_type']) ? $site_alert['alert_type'] : '',
              'position' => 'position-' . $position,
              'title' => !empty($site_alert['alert_title']) ? $site_alert['alert_title'] : '',
              'message' => !empty($site_alert['alert_message']) ? $site_alert['alert_message'] : [],
              'dismiss' => !empty($site_alert['alert_dismiss']),
              'dismiss_title' => !empty($site_alert['alert_dismiss_title']) ? $site_alert['alert_dismiss_title'] : 'Close',
              'dismiss_key' => !empty($site_alert['alert_dismiss_key']) ? $site_alert['alert_dismiss_key'] : '',
              'link_type' => $alert_link_type,
              'link' => $alert_link,
              'link_title' => !empty($site_alert['alert_link_title']) ? $site_alert['alert_link_title'] : '',
            ],
          ];
        }
        $alert_keys[] = $site_alert['alert_dismiss_key'];
      }

      // Set up cookie expiration value for jQuery cookie function
      switch ($config['site_alert_expiration']) {
        case 'year':
          $expiration = 365;
          break;
        case 'month':
          $expiration = 30;
          break;
        case 'week':
          $expiration = 7;
          break;
        case 'day':
          $expiration = 1;
          break;
        default:
          $expiration = 'default';
      }

      $build['#attached'] = [
        'library' => ['sitewide_alerts/alerts'],
        'drupalSettings' => [
          'sitewide_alerts' => [
            'dismissedKeys' => $alert_keys,
            'cookieExpiration' => $expiration,
          ],
        ],
      ];

      $cacheableMetadata = new CacheableMetadata();
      $cacheableMetadata->addCacheableDependency($config);
      $cacheTags = ['sitewide_alerts'];
      if (!empty($activeDomainId)) {
        $cacheTags[] = 'domain';
      }
      $cacheableMetadata->addCacheTags($cacheTags);
      $cacheableMetadata->applyTo($build);
    }
  }

  return $build;
}

/**
 * Implements hook_page_top().
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function sitewide_alerts_page_top(array &$page_top) {
  $page_top['sitewide_alerts'] = _sitewide_alerts_get_alerts('top');
}

/**
 * Implements hook_page_bottom().
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function sitewide_alerts_page_bottom(array &$page_bottom) {
  $page_bottom['sitewide_alerts'] = _sitewide_alerts_get_alerts('bottom');
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function sitewide_alerts_menu_local_tasks_alter(&$data, $route_name) {
  if ($route_name == 'sitewide_alerts.alert_config_form' || $route_name == 'sitewide_alerts.config_form') {
    $language_manager = \Drupal::languageManager();
    $current_language = $language_manager->getCurrentLanguage();
    $languages = $language_manager->getLanguages();
    foreach ($languages AS $language) {
      if ($language->getId() != $current_language->getId()) {
        $data['tabs'][0]['sitewide_alerts.translate_' . $language->getId() . '_tab'] = [
          '#theme' => 'menu_local_task',
          '#link' => [
            'title' => t('Translate (%language)', ['%language' => $language->getName()]),
            'url' => Url::fromRoute('sitewide_alerts.alert_config_form', [], [
              'language' => $language,
            ]),
            'localized_options' => [
              'attributes' => [
                'title' => t('Translate site alert(s)'),
              ],
            ],
          ],
        ];
      }
    }
  }
}
